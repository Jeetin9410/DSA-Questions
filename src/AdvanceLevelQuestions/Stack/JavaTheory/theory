                                                       STACK

A stack is a linear data structure that follows the LIFO (Last In, First Out) principle, meaning the last item added is the first to be removed.

Key Methods in Stack:
1. push(item) → Add Element to stack
		      TC: O(1)
		      SC: O(1)


2. pop() → Removes and returns the top element of the stack. Throws an exception if the stack is empty.
		    	TC: O(1)
 			SC: O(1)


3. peek() → To print top element of stack. Return top element of  stack with removing it.
			TC: O(1)
			SC: O(1)

4. isEmpty() → return is stack is empty or not.
			TC : O(1)
			SC: O(1)

5. search(item) →  Returns the 1-based position of the element in the stack. Returns -1 if the element is not found.
				TC: O(n)
				SC: O(1)
Ques: How to identify where to apply Stack ?
Ans:
Use a stack when:
1. You need to process elements in reverse order (e.g., undo operations).
2. The problem involves nested structures (e.g., balanced parentheses).
3. A task has recursive characteristics but needs iterative implementation (e.g., DFS).

Explanation:
In most of the cases → Array will be given
And brute force solution is nested 2 for loops with a little catch

for (int i =0; i < n; i++) {
	for(int j = 0; j < i; j++) {

}
}

The catch here is ---> if j is varying such that
                                  0 to i
					OR
                                  i  to (n - 1)
					OR
                                  (n-1) to i
					OR
                                  i  to 0
In this case 99% chances are that we can improve our solution using Stack.

Now there are some patterns in stack ---> basically Parent questions.

Using those parent question → variations (4-5)

So if we know parent question and its variation we will be able to solve variations as well.

For this check : https://youtu.be/P1bAPZg5uaE?si=wxM5lqpPgvwkm8wJ





